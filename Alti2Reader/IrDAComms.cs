// ------------------------------------------------------------------------------
//     This code was generated by 
//     9Rays.Net Decompiler.Net services Evaluation
//     ver.5.8.0.54
//     http://www.9rays.net
//     Copyright 2011 9Rays.Net All rights reserved.
//     Evaluation version: decompiles about 50% of methods, properties and events.
// ------------------------------------------------------------------------------

namespace IrDAComms
{
    using System;
    using System.IO;
    using System.Net.Sockets;
    using System.Text;
    using InTheHand.Net;
    using InTheHand.Net.Sockets;
    using IrDAComms;

    public interface INepComms
    {
        #region INepComms Methods
        bool _open(bool loggit);
        bool _connected();
        int _read();
        bool _ready();
        bool _write(int c);
        bool _flushNep();
        bool _close();
        int _geterrorcode();
        #endregion
    }
    public class NepComms : INepComms
    {
        #region NepComms Fields
        private const string ServiceName = "\"IrDA:IrCOMM\"";
        public static IrDAClient m_cli;
        public static IrDADeviceInfo[] dids;
        public string lastErrorMessage;
        private static bool _loggederrors;
        private static string _errorlogfilename;
        private int _perrorcode;
        public static string _IDString;
        #endregion
        #region NepComms Constructors
        public NepComms() : base()
        {
            return;
        }
        #endregion
        #region NepComms Methods
        public virtual int _geterrorcode()
        {
            return this._perrorcode;
        }
        public virtual bool _open(bool loggit)
        {
            bool bl;
            string[] arrstr;
            int i;
            Exception exception;
            Exception exception1;
            bl = false;
            this.lastErrorMessage = "";
            this._perrorcode = 0;
            NepComms._loggederrors = loggit;
            if (!loggit)
            {
                goto ILO_0023;
            }
            logerrorsopen();
        ILO_0023:
            arrstr = new string[7];
            try
            {
                arrstr = GetAllDeviceIDs();
                if (this.lastErrorMessage.Length != 0)
                {
                    goto ILO_0112;
                }
                if (((!(arrstr[0] == NepComms._IDString)) && (!(arrstr[0] == "Neptune"))) && (!(arrstr[0] == "DataLogger")))
                {
                    goto ILO_0088;
                }
                NepComms._IDString = arrstr[0];
                if (!NepConnect())
                {
                    goto ILO_0112;
                }
                bl = true;
                goto ILO_0112;
            ILO_0088:
                i = 1;
                goto ILO_00cf;
            ILO_008c:
                this.lastErrorMessage = string.Concat(NepComms._IDString, " must be the first Infrared device in the system");
                this._perrorcode = 1;
                if ((!(arrstr[i] == NepComms._IDString)) || (!NepComms._loggederrors))
                {
                    goto ILO_00cb;
                }
                loganerror(1, this.lastErrorMessage);
            ILO_00cb:
                i++;
            ILO_00cf:
                if (i < 7)
                {
                    goto ILO_008c;
                }
                this.lastErrorMessage = string.Concat(NepComms._IDString, " not found.");
                this._perrorcode = 2;
                if ((this.lastErrorMessage.Length != 0) || (!NepComms._loggederrors))
                {
                    goto ILO_0110;
                }
                loganerror(2, this.lastErrorMessage);
            ILO_0110:
                bl = false;
            ILO_0112:
                goto ILO_014c;
            }
            catch (Exception exception1)
            {
                exception = exception1;
                this.lastErrorMessage = string.Concat("open: ", exception.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_0148;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_0148:
                bl = false;
                goto ILO_014c;
            }
        ILO_014c:
            return bl;
        }
        public string[] GetAllDeviceIDs()
        {
            string[] arrstr;
            int i;
            int i1;
            SocketException socketException;
            SocketException socketException1;
            arrstr = new string[7];
            i1 = 7;
            i = 0;
            goto ILO_0019;
        ILO_000d:
            arrstr[i] = "";
            i++;
        ILO_0019:
            if (i < i1)
            {
                goto ILO_000d;
            }
            this.lastErrorMessage = "";
            this._perrorcode = 0;
            try
            {
                if (NepComms.m_cli != null)
                {
                    goto ILO_0040;
                }
                NepComms.m_cli = new IrDAClient();
            ILO_0040:
                NepComms.m_cli.Client.SetSocketOption(((SocketOptionLevel)255), ((SocketOptionName.AcceptConnection | SocketOptionName.ReuseAddress) | SocketOptionName.DontRoute), 1);
                NepComms.m_cli.Client.ReceiveBufferSize = 5000000;
                NepComms.m_cli.Client.SendBufferSize = 32;
                NepComms.m_cli.Client.ReceiveTimeout = 3000;
                NepComms.m_cli.Client.SendTimeout = 3000;
                NepComms.dids = new IrDADeviceInfo[7];
                NepComms.dids = NepComms.m_cli.DiscoverDevices();
                i1 = NepComms.dids.GetLength(0);
                i = 0;
                goto ILO_00e1;
            ILO_00ce:
                arrstr[i] = NepComms.dids[i].DeviceName;
                i++;
            ILO_00e1:
                if (i < i1)
                {
                    goto ILO_00ce;
                }
                goto ILO_011d;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("GetAllDeviceIDs: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_011b;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_011b:
                goto ILO_011d;
            }
        ILO_011d:
            return arrstr;
        }
        public bool NepConnect()
        {
            IrDAEndPoint irDAEndPoint;
            SocketException socketException;
            bool bl;
            SocketException socketException1;
            try
            {
                irDAEndPoint = new IrDAEndPoint(NepComms.dids[0].DeviceAddress, "IrDA:IrCOMM");
                NepComms.m_cli.Client.Connect(irDAEndPoint);
                goto ILO_0061;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("Connection not established because ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_005d;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_005d:
                bl = false;
                goto ILO_0063;
            }
        ILO_0061:
            return true;
        ILO_0063:
            return bl;
        }
        public virtual bool _connected()
        {
            bool bl;
            object obj;
            bl = false;
            try
            {
                if (NepComms.m_cli != null)
                {
                    goto ILO_0025;
                }
                bl = false;
                goto ILO_0049;
            ILO_0025:
                if (((!(NepComms.dids[0].DeviceName == NepComms._IDString)) || (!NepComms.m_cli.Connected)) || (!(NepComms.m_cli.RemoteMachineName == NepComms._IDString)))
                {
                    goto ILO_0049;
                }
                bl = true;
            ILO_0049:
                goto ILO_0076;
            }
            catch (object obj)
            {
                obj;
                this.lastErrorMessage = "Error while testing connected status.";
                this._perrorcode = 3;
                if (!NepComms._loggederrors)
                {
                    goto ILO_0072;
                }
                loganerror(3, this.lastErrorMessage);
            ILO_0072:
                bl = false;
                goto ILO_0076;
            }
        ILO_0076:
            return bl;
        }
        public bool sendtext(string Message)
        {
            byte[] arrbyt;
            SocketException socketException;
            bool bl;
            SocketException socketException1;
            arrbyt = Encoding.GetEncoding("ASCII").GetBytes(Message);
            try
            {
                NepComms.m_cli.Client.Send(arrbyt);
                goto ILO_005c;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("sendtext: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_0058;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_0058:
                bl = false;
                goto ILO_005e;
            }
        ILO_005c:
            return true;
        ILO_005e:
            return bl;
        }
        public string receivetext()
        {
            byte[] arrbyt;
            string str;
            SystemException systemException;
            string str1;
            SystemException systemException1;
            this.lastErrorMessage = "";
            arrbyt = new byte[_bytesavail()];
            try
            {
                NepComms.m_cli.Client.Receive(arrbyt);
                str = Encoding.GetEncoding("ASCII").GetString(arrbyt);
                str1 = str;
                goto ILO_0079;
            }
            catch (SystemException systemException1)
            {
                systemException = systemException1;
                this.lastErrorMessage = string.Concat("receivetext: ", systemException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_0071;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_0071:
                str1 = "";
                goto ILO_0079;
            }
        ILO_0079:
            return str1;
        }
        public virtual int _read()
        {
            int i;
            byte[] arrbyt;
            SocketException socketException;
            int i1;
            SocketException socketException1;
            arrbyt = new byte[1];
            if (NepComms.m_cli != null)
            {
                goto ILO_0036;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            if (!NepComms._loggederrors)
            {
                goto ILO_0034;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_0034:
            return -1;
            try
            {
            ILO_0036:
                if (NepComms.m_cli.Available != 0)
                {
                    goto ILO_0046;
                }
                i1 = -1;
                goto ILO_0099;
            ILO_0046:
                NepComms.m_cli.Client.Receive(arrbyt, 1, SocketFlags.None);
                i = arrbyt[0];
                goto ILO_0097;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("read: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_0093;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_0093:
                i = -1;
                goto ILO_0097;
            }
        ILO_0097:
            return i;
        ILO_0099:
            return i1;
        }
        public int _bytesavail()
        {
            int i;
            SocketException socketException;
            SocketException socketException1;
            i = 0;
            if (NepComms.m_cli != null)
            {
                goto ILO_0031;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            if (!NepComms._loggederrors)
            {
                goto ILO_002f;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_002f:
            return 0;
            try
            {
            ILO_0031:
                if (!_connected())
                {
                    goto ILO_0044;
                }
                i = NepComms.m_cli.Available;
            ILO_0044:
                goto ILO_007c;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("bytesavail:", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_007a;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_007a:
                goto ILO_007c;
            }
        ILO_007c:
            return i;
        }
        public virtual bool _ready()
        {
            if (_bytesavail() != 0)
            {
                goto ILO_000a;
            }
            return false;
        ILO_000a:
            return true;
        }
        public virtual bool _write(int c)
        {
            SocketFlags socketFlags;
            byte[] arrbyt;
            SocketException socketException;
            bool bl;
            SocketException socketException1;
            if (NepComms.m_cli != null)
            {
                goto ILO_002f;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            if (!NepComms._loggederrors)
            {
                goto ILO_002d;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_002d:
            return false;
        ILO_002f:
            socketFlags = SocketFlags.OutOfBand;
            arrbyt = new byte[1];
            arrbyt[0] = Convert.ToByte(c);
            try
            {
                NepComms.m_cli.Client.Send(arrbyt, arrbyt.Length, socketFlags);
                goto ILO_0090;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("write: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_008c;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_008c:
                bl = false;
                goto ILO_0092;
            }
        ILO_0090:
            return true;
        ILO_0092:
            return bl;
        }
        public virtual bool _flushNep()
        {
            byte[] arrbyt;
            SocketException socketException;
            bool bl;
            SocketException socketException1;
            arrbyt = new byte[1];
            if (NepComms.m_cli != null)
            {
                goto ILO_0083;
            }
            this.lastErrorMessage = "The unit is no longer connected.";
            this._perrorcode = 4;
            if (!NepComms._loggederrors)
            {
                goto ILO_0034;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_0034:
            return false;
            try
            {
            ILO_0036:
                NepComms.m_cli.Client.Receive(arrbyt, 1, SocketFlags.None);
                goto ILO_0083;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("Comm Flush Failed: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_007f;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_007f:
                bl = false;
                goto ILO_0092;
            }
        ILO_0083:
            if (NepComms.m_cli.Available > 0)
            {
                goto ILO_0036;
            }
            return true;
        ILO_0092:
            return bl;
        }
        public virtual bool _close()
        {
            SocketException socketException;
            bool bl;
            SocketException socketException1;
            try
            {
                if (!_connected())
                {
                    goto ILO_0012;
                }
                NepComms.m_cli.Close();
            ILO_0012:
                NepComms.m_cli = null;
                goto ILO_0052;
            }
            catch (SocketException socketException1)
            {
                socketException = socketException1;
                this.lastErrorMessage = string.Concat("close: ", socketException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_004e;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_004e:
                bl = false;
                goto ILO_0054;
            }
        ILO_0052:
            return true;
        ILO_0054:
            return bl;
        }
        public bool _release()
        {
            SystemException systemException;
            bool bl;
            SystemException systemException1;
            try
            {
                NepComms.m_cli = null;
                goto ILO_0040;
            }
            catch (SystemException systemException1)
            {
                systemException = systemException1;
                this.lastErrorMessage = string.Concat("close: ", systemException.Message);
                this._perrorcode = 99;
                if (!NepComms._loggederrors)
                {
                    goto ILO_003c;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_003c:
                bl = false;
                goto ILO_0042;
            }
        ILO_0040:
            return true;
        ILO_0042:
            return bl;
        }
        private void logerrorsopen()
        {
            string str;
            object obj;
            try
            {
                str = Directory.GetCurrentDirectory();
                NepComms._errorlogfilename = string.Concat(str, "\\NMUerrorlog.txt");
                goto ILO_002b;
            }
            catch (object obj)
            {
                obj;
                NepComms._loggederrors = false;
                NepComms._errorlogfilename = "";
                goto ILO_002b;
            }
        ILO_002b:
            return;
        }
        private void loganerror(int ecode, string emsg)
        {
            string str;
            StreamWriter streamWriter;
            object[] arrobj;
            DateTime dtm;
            arrobj = new object[5];
            dtm = DateTime.Now;
            arrobj[0] = dtm.ToString();
            arrobj[1] = "\t";
            arrobj[2] = ecode;
            arrobj[3] = "\t";
            arrobj[4] = emsg;
            str = string.Concat(arrobj);
            streamWriter = File.AppendText(NepComms._errorlogfilename);
            streamWriter.WriteLine(str);
            streamWriter.Close();
            return;
        }
        private void logerrorsclose()
        {
            NepComms._loggederrors = false;
            return;
        }
        #endregion
        #region NepComms Properties
        public int _errorcode
        {
            get
            {
                return this._perrorcode;
            }
            set
            {
                this._perrorcode = value;
                return;
            }
        }
        #endregion
    }
}
