// ------------------------------------------------------------------------------
//     This code was generated by 
//     9Rays.Net Decompiler.Net services Evaluation
//     ver.5.8.0.54
//     http://www.9rays.net
//     Copyright 2011 9Rays.Net All rights reserved.
//     Evaluation version: decompiles about 50% of methods, properties and events.
// ------------------------------------------------------------------------------

namespace USBComms
{
    using System;
    using System.IO;
    using System.IO.Ports;
    using System.Text;
    using USBComms;

    public interface uNepComms
    {
        #region uNepComms Methods
        bool _open(bool loggit);
        bool _connected();
        int _read();
        bool _ready();
        bool _write(int c);
        bool _flushNep();
        bool _close();
        int _geterrorcode();
        #endregion
    }
    public class USBComms : uNepComms
    {
        #region USBComms Fields
        public string lastErrorMessage;
        public string pPortName;
        public static SerialPort port;
        private static bool _loggederrors;
        private static string _errorlogfilename;
        private int _perrorcode;
        public static string _IDString;
        public int _Baud;
        public bool _DTRenable;
        public bool _RTSEnable;
        #endregion
        #region USBComms Constructors
        public USBComms() : base()
        {
            return;
        }
        #endregion
        #region USBComms Methods
        public virtual int _geterrorcode()
        {
            int i;
            i = this._perrorcode;
            return i;
        }
        public virtual bool _open(bool loggit)
        {
            bool bl;
            int i;
            Exception exception;
            bool bl1;
            bool bl2;
            Exception exception1;
            bl2 = !(this._Baud == 0);
            if (bl2)
            {
                goto ILO_001d;
            }
            i = 57600;
            goto ILO_0026;
        ILO_001d:
            i = this._Baud;
        ILO_0026:
            bl = false;
            this.lastErrorMessage = "";
            this._perrorcode = 0;
            USBComms._loggederrors = loggit;
            bl2 = !loggit;
            if (bl2)
            {
                goto ILO_0051;
            }
            logerrorsopen();
            try
            {
                try
                {
                ILO_0051:
                    bl2 = !(USBComms.port == null);
                    if (bl2)
                    {
                        goto ILO_006f;
                    }
                    USBComms.port = new SerialPort();
                ILO_006f:
                    USBComms.port.PortName = this.pPortName;
                    USBComms.port.BaudRate = i;
                    USBComms.port.Parity = Parity.None;
                    USBComms.port.DataBits = 8;
                    USBComms.port.StopBits = StopBits.One;
                    USBComms.port.ReadTimeout = -1;
                    USBComms.port.WriteTimeout = -1;
                    USBComms.port.Handshake = Handshake.RequestToSend;
                    USBComms.port.Open();
                    bl2 = !this._DTRenable;
                    if (bl2)
                    {
                        goto ILO_00fc;
                    }
                    USBComms.port.DtrEnable = true;
                ILO_00fc:
                    bl = true;
                    goto ILO_0143;
                }
                catch (Exception exception1)
                {
                    exception = exception1;
                    this.lastErrorMessage = string.Concat("open: ", exception.Message);
                    this._perrorcode = 99;
                    bl2 = !USBComms._loggederrors;
                    if (bl2)
                    {
                        goto ILO_013e;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_013e:
                    bl = false;
                    goto ILO_0143;
                }
            ILO_0143:
                goto ILO_0149;
            }
            finally
            {
            }
        ILO_0149:
            bl1 = bl;
            return bl1;
        }
        public virtual bool _connected()
        {
            bool bl;
            SystemException systemException;
            bool bl1;
            bool bl2;
            SystemException systemException1;
            bl = false;
            try
            {
                try
                {
                    bl2 = !USBComms.port.IsOpen;
                    if (bl2)
                    {
                        goto ILO_001b;
                    }
                    bl = true;
                    goto ILO_001f;
                ILO_001b:
                    bl = false;
                ILO_001f:
                    goto ILO_0060;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("Error while testing connected status: ", systemException.Message);
                    this._perrorcode = 3;
                    bl2 = !USBComms._loggederrors;
                    if (bl2)
                    {
                        goto ILO_005b;
                    }
                    loganerror(3, this.lastErrorMessage);
                ILO_005b:
                    bl = false;
                    goto ILO_0060;
                }
            ILO_0060:
                goto ILO_0066;
            }
            finally
            {
            }
        ILO_0066:
            bl1 = bl;
            return bl1;
        }
        public bool sendtext(string Message)
        {
            bool bl;
            bool bl1;
            object obj;
            try
            {
                try
                {
                    USBComms.port.Write(Message);
                    goto ILO_004b;
                }
                catch (object obj)
                {
                    obj;
                    this.lastErrorMessage = string.Concat("sendtext: ", Message);
                    this._perrorcode = 99;
                    bl1 = !USBComms._loggederrors;
                    if (bl1)
                    {
                        goto ILO_0047;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_0047:
                    bl = false;
                    goto ILO_0056;
                }
            ILO_004b:
                goto ILO_0051;
            }
            finally
            {
            }
        ILO_0051:
            bl = true;
        ILO_0056:
            return bl;
        }
        public string receivetext()
        {
            byte[] arrbyt;
            int i;
            string str;
            SystemException systemException;
            string str1;
            bool bl;
            SystemException systemException1;
            this.lastErrorMessage = "";
            i = _bytesavail();
            arrbyt = new byte[_bytesavail()];
            try
            {
                try
                {
                    USBComms.port.Read(arrbyt, 0, i);
                    str = Encoding.GetEncoding("ASCII").GetString(arrbyt);
                    str1 = str;
                    goto ILO_008d;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("receivetext: ", systemException.Message);
                    this._perrorcode = 99;
                    bl = !USBComms._loggederrors;
                    if (bl)
                    {
                        goto ILO_0081;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_0081:
                    str1 = "";
                    goto ILO_008d;
                }
            }
            finally
            {
            }
        ILO_008d:
            return str1;
        }
        public virtual int _read()
        {
            int i;
            byte[] arrbyt;
            SystemException systemException;
            int i1;
            bool bl;
            SystemException systemException1;
            arrbyt = new byte[1];
            bl = !(USBComms.port == null);
            if (bl)
            {
                goto ILO_004c;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            bl = !USBComms._loggederrors;
            if (bl)
            {
                goto ILO_0048;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_0048:
            i1 = -1;
            goto ILO_00c9;
            try
            {
                try
                {
                ILO_004c:
                    bl = !(USBComms.port.BytesToRead == 0);
                    if (bl)
                    {
                        goto ILO_0067;
                    }
                    i1 = -1;
                    goto ILO_00c9;
                ILO_0067:
                    USBComms.port.Read(arrbyt, 0, 1);
                    i = arrbyt[0];
                    goto ILO_00be;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("read: ", systemException.Message);
                    this._perrorcode = 99;
                    bl = !USBComms._loggederrors;
                    if (bl)
                    {
                        goto ILO_00b9;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_00b9:
                    i = -1;
                    goto ILO_00be;
                }
            ILO_00be:
                goto ILO_00c4;
            }
            finally
            {
            }
        ILO_00c4:
            i1 = i;
        ILO_00c9:
            return i1;
        }
        public int _bytesavail()
        {
            int i;
            SystemException systemException;
            int i1;
            bool bl;
            SystemException systemException1;
            i = 0;
            bl = !(USBComms.port == null);
            if (bl)
            {
                goto ILO_0043;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            bl = !USBComms._loggederrors;
            if (bl)
            {
                goto ILO_003f;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_003f:
            i1 = 0;
            goto ILO_00a8;
            try
            {
            ILO_0043:
                bl = !USBComms.port.IsOpen;
                if (bl)
                {
                    goto ILO_0062;
                }
                i = USBComms.port.BytesToRead;
            ILO_0062:
                goto ILO_00a3;
            }
            catch (SystemException systemException1)
            {
                systemException = systemException1;
                this.lastErrorMessage = string.Concat("bytesavail:", systemException.Message);
                this._perrorcode = 99;
                bl = !USBComms._loggederrors;
                if (bl)
                {
                    goto ILO_00a0;
                }
                loganerror(99, this.lastErrorMessage);
            ILO_00a0:
                goto ILO_00a3;
            }
        ILO_00a3:
            i1 = i;
        ILO_00a8:
            return i1;
        }
        public virtual bool _ready()
        {
            bool bl;
            bool bl1;
            bl1 = !(_bytesavail() == 0);
            if (bl1)
            {
                goto ILO_0015;
            }
            bl = false;
            goto ILO_0019;
        ILO_0015:
            bl = true;
        ILO_0019:
            return bl;
        }
        public virtual bool _write(int c)
        {
            byte[] arrbyt;
            SystemException systemException;
            bool bl;
            bool bl1;
            SystemException systemException1;
            bl1 = !(USBComms.port == null);
            if (bl1)
            {
                goto ILO_0041;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            bl1 = !USBComms._loggederrors;
            if (bl1)
            {
                goto ILO_003d;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_003d:
            bl = false;
            goto ILO_00af;
        ILO_0041:
            arrbyt = new byte[1];
            arrbyt[0] = Convert.ToByte(c);
            try
            {
                try
                {
                    USBComms.port.Write(arrbyt, 0, arrbyt.Length);
                    goto ILO_00a4;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("write: ", systemException.Message);
                    this._perrorcode = 99;
                    bl1 = !USBComms._loggederrors;
                    if (bl1)
                    {
                        goto ILO_00a0;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_00a0:
                    bl = false;
                    goto ILO_00af;
                }
            ILO_00a4:
                goto ILO_00aa;
            }
            finally
            {
            }
        ILO_00aa:
            bl = true;
        ILO_00af:
            return bl;
        }
        public virtual bool _flushNep()
        {
            byte[] arrbyt;
            SystemException systemException;
            bool bl;
            bool bl1;
            SystemException systemException1;
            arrbyt = new byte[1];
            bl1 = !(USBComms.port == null);
            if (bl1)
            {
                goto ILO_004b;
            }
            this.lastErrorMessage = "The unit is no longer connected.";
            this._perrorcode = 4;
            bl1 = !USBComms._loggederrors;
            if (bl1)
            {
                goto ILO_0044;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_0044:
            bl = false;
            goto ILO_00d3;
        ILO_004b:
            bl1 = !USBComms.port.IsOpen;
            if (bl1)
            {
                goto ILO_00ca;
            }
            goto ILO_00b6;
        ILO_005f:
            try
            {
                try
                {
                    USBComms.port.DiscardInBuffer();
                    goto ILO_00ae;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("Comm Flush Failed: ", systemException.Message);
                    this._perrorcode = 99;
                    bl1 = !USBComms._loggederrors;
                    if (bl1)
                    {
                        goto ILO_00aa;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_00aa:
                    bl = false;
                    goto ILO_00d3;
                }
            ILO_00ae:
                goto ILO_00b4;
            }
            finally
            {
            }
        ILO_00b4:
        ILO_00b6:
            bl1 = USBComms.port.BytesToRead > 0;
            if (bl1)
            {
                goto ILO_005f;
            }
            goto ILO_00cf;
        ILO_00ca:
            bl = true;
            goto ILO_00d3;
        ILO_00cf:
            bl = true;
        ILO_00d3:
            return bl;
        }
        public virtual bool _close()
        {
            bool bl;
            bool bl1;
            object obj;
            try
            {
                try
                {
                    bl1 = !USBComms.port.IsOpen;
                    if (bl1)
                    {
                        goto ILO_002c;
                    }
                    USBComms.port.DtrEnable = false;
                    USBComms.port.Close();
                ILO_002c:
                    goto ILO_0063;
                }
                catch (object obj)
                {
                    obj;
                    this.lastErrorMessage = "close error";
                    this._perrorcode = 99;
                    bl1 = !USBComms._loggederrors;
                    if (bl1)
                    {
                        goto ILO_005f;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_005f:
                    bl = false;
                    goto ILO_006e;
                }
            ILO_0063:
                goto ILO_0069;
            }
            finally
            {
            }
        ILO_0069:
            bl = true;
        ILO_006e:
            return bl;
        }
        private void logerrorsopen()
        {
            string str;
            object obj;
            try
            {
                str = Directory.GetCurrentDirectory();
                USBComms._errorlogfilename = string.Concat(str, "\\NMUerrorlog.txt");
                goto ILO_0030;
            }
            catch (object obj)
            {
                obj;
                USBComms._loggederrors = false;
                USBComms._errorlogfilename = "";
                goto ILO_0030;
            }
        ILO_0030:
            return;
        }
        private void loganerror(int ecode, string emsg)
        {
            string str;
            StreamWriter streamWriter;
            object[] arrobj;
            DateTime dtm;
            arrobj = new object[5];
            dtm = DateTime.Now;
            arrobj[0] = dtm.ToString();
            arrobj[1] = "\t";
            arrobj[2] = ecode;
            arrobj[3] = "\t";
            arrobj[4] = emsg;
            str = string.Concat(arrobj);
            streamWriter = File.AppendText(USBComms._errorlogfilename);
            streamWriter.WriteLine(str);
            streamWriter.Close();
            return;
        }
        private void logerrorsclose()
        {
            USBComms._loggederrors = false;
            return;
        }
        public bool _writearray(byte[] a)
        {
            SystemException systemException;
            bool bl;
            bool bl1;
            SystemException systemException1;
            bl1 = !(USBComms.port == null);
            if (bl1)
            {
                goto ILO_0041;
            }
            this.lastErrorMessage = "Unit is no longer connected.";
            this._perrorcode = 4;
            bl1 = !USBComms._loggederrors;
            if (bl1)
            {
                goto ILO_003d;
            }
            loganerror(4, this.lastErrorMessage);
        ILO_003d:
            bl = false;
            goto ILO_009f;
            try
            {
                try
                {
                ILO_0041:
                    USBComms.port.Write(a, 0, a.Length);
                    goto ILO_0094;
                }
                catch (SystemException systemException1)
                {
                    systemException = systemException1;
                    this.lastErrorMessage = string.Concat("write: ", systemException.Message);
                    this._perrorcode = 99;
                    bl1 = !USBComms._loggederrors;
                    if (bl1)
                    {
                        goto ILO_0090;
                    }
                    loganerror(99, this.lastErrorMessage);
                ILO_0090:
                    bl = false;
                    goto ILO_009f;
                }
            ILO_0094:
                goto ILO_009a;
            }
            finally
            {
            }
        ILO_009a:
            bl = true;
        ILO_009f:
            return bl;
        }
        #endregion
        #region USBComms Properties
        public int _errorcode
        {
            get
            {
                int i;
                i = this._perrorcode;
                return i;
            }
            set
            {
                this._perrorcode = value;
                return;
            }
        }
        #endregion
    }
}
